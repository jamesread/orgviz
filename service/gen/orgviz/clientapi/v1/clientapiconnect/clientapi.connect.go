// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: orgviz/clientapi/v1/clientapi.proto

package clientapiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jamesread/orgviz/gen/orgviz/clientapi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClientToFrontendName is the fully-qualified name of the ClientToFrontend service.
	ClientToFrontendName = "clientapi.ClientToFrontend"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClientToFrontendGetClientInitialSettingsProcedure is the fully-qualified name of the
	// ClientToFrontend's getClientInitialSettings RPC.
	ClientToFrontendGetClientInitialSettingsProcedure = "/clientapi.ClientToFrontend/getClientInitialSettings"
)

// ClientToFrontendClient is a client for the clientapi.ClientToFrontend service.
type ClientToFrontendClient interface {
	GetClientInitialSettings(context.Context, *connect.Request[v1.GetClientInitialSettingsRequest]) (*connect.Response[v1.GetClientInitialSettingsResponse], error)
}

// NewClientToFrontendClient constructs a client for the clientapi.ClientToFrontend service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClientToFrontendClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClientToFrontendClient {
	baseURL = strings.TrimRight(baseURL, "/")
	clientToFrontendMethods := v1.File_orgviz_clientapi_v1_clientapi_proto.Services().ByName("ClientToFrontend").Methods()
	return &clientToFrontendClient{
		getClientInitialSettings: connect.NewClient[v1.GetClientInitialSettingsRequest, v1.GetClientInitialSettingsResponse](
			httpClient,
			baseURL+ClientToFrontendGetClientInitialSettingsProcedure,
			connect.WithSchema(clientToFrontendMethods.ByName("getClientInitialSettings")),
			connect.WithClientOptions(opts...),
		),
	}
}

// clientToFrontendClient implements ClientToFrontendClient.
type clientToFrontendClient struct {
	getClientInitialSettings *connect.Client[v1.GetClientInitialSettingsRequest, v1.GetClientInitialSettingsResponse]
}

// GetClientInitialSettings calls clientapi.ClientToFrontend.getClientInitialSettings.
func (c *clientToFrontendClient) GetClientInitialSettings(ctx context.Context, req *connect.Request[v1.GetClientInitialSettingsRequest]) (*connect.Response[v1.GetClientInitialSettingsResponse], error) {
	return c.getClientInitialSettings.CallUnary(ctx, req)
}

// ClientToFrontendHandler is an implementation of the clientapi.ClientToFrontend service.
type ClientToFrontendHandler interface {
	GetClientInitialSettings(context.Context, *connect.Request[v1.GetClientInitialSettingsRequest]) (*connect.Response[v1.GetClientInitialSettingsResponse], error)
}

// NewClientToFrontendHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClientToFrontendHandler(svc ClientToFrontendHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clientToFrontendMethods := v1.File_orgviz_clientapi_v1_clientapi_proto.Services().ByName("ClientToFrontend").Methods()
	clientToFrontendGetClientInitialSettingsHandler := connect.NewUnaryHandler(
		ClientToFrontendGetClientInitialSettingsProcedure,
		svc.GetClientInitialSettings,
		connect.WithSchema(clientToFrontendMethods.ByName("getClientInitialSettings")),
		connect.WithHandlerOptions(opts...),
	)
	return "/clientapi.ClientToFrontend/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClientToFrontendGetClientInitialSettingsProcedure:
			clientToFrontendGetClientInitialSettingsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClientToFrontendHandler returns CodeUnimplemented from all methods.
type UnimplementedClientToFrontendHandler struct{}

func (UnimplementedClientToFrontendHandler) GetClientInitialSettings(context.Context, *connect.Request[v1.GetClientInitialSettingsRequest]) (*connect.Response[v1.GetClientInitialSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("clientapi.ClientToFrontend.getClientInitialSettings is not implemented"))
}
